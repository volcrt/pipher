#!/usr/bin/env python

import argparse
import sys
import getpass
import base64
import os
import subprocess

from cryptography.fernet import Fernet, InvalidToken
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.asymmetric import padding

from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.backends import default_backend
from cryptography.exceptions import InvalidKey, InvalidSignature

def init():
    ''' initializes arguments and starts encryption / decryption '''

    global args
    parser = argparse.ArgumentParser(
    description="pipher decrypts or encrypts string from stdin and outputs the result")

    parser.add_argument(
        "-e", "--encrypt", action='store_true', help="encrypts a string")

    parser.add_argument(
        "-d", "--decrypt", action='store_true', help="decrypts a string")

    parser.add_argument(
        "-i", "--identity", type=argparse.FileType('r'), help="using public private key instead of password")

    parser.add_argument(
        "-s", "--salt", default='', help="some string as salt used for better protection against dictionary attacks")

    parser.add_argument(
	"-g", "--gui", action='store_true', help="use stdin from password dialog")

    parser.add_argument(
	"-t", "--title", default='', help="some string as title")

    args = parser.parse_args()

    if args.encrypt:
        encrypt()
    elif args.decrypt:
        decrypt()
    else:
        usage()



def read_password():
    dialog_cmd = os.getenv('PIPHER_PASSWORD_DIALOG')

    if not args.gui or not dialog_cmd:
      return getpass.getpass('enter password:\n').encode()

    try:
        # Verwenden Sie kdialog, um das Passwort einzugeben
        password = subprocess.check_output(dialog_cmd % args.title, shell=True, text=True).strip()
        return password.encode()
    except subprocess.CalledProcessError:
        print("Fehler beim Aufrufen von kdialog.")
        return getpass.getpass('enter password:\n').encode()

def read_public_key():
    ''' reads public key from identity file  '''

    public_key = "".join(args.identity.readlines())
    return serialization.load_pem_public_key(public_key.encode())

def read_private_key(private_key = None, password = None):
    ''' reads private key from identity file and
        prompts for password in case of encryption  '''

    if not private_key:
        private_key = "".join(args.identity.read())
    try:
        return serialization.load_pem_private_key(private_key.encode(), password)

    except Exception as e:
        if password:
          print(str(e))
        password = getpass.getpass('private key seems to be encrypted, please enter password:\n')
        return read_private_key(private_key, password.encode())

def read_key_pass():
    ''' prompts for a password and derives it to an encryption key  '''

    password = read_password()
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=args.salt.encode(),
        iterations=100000,  # number of rounds
        backend=default_backend()
    )

    key = base64.urlsafe_b64encode(kdf.derive(password))
    return key

def encrypt_public_key():
    ''' encrypts text from stdin using a public key '''

    text = readStdIn()
    loaded_public_key = read_public_key()
    encrypted_text = loaded_public_key.encrypt(
            text.encode(),
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
            label=None
        )
    )
    return base64.urlsafe_b64encode(encrypted_text.hex().encode()).decode()

def decrypt_private_key():
    ''' decrypts encrypted text from stdin using a private key '''

    encrypted_text = base64.urlsafe_b64decode(readStdIn())
    loaded_private_key = read_private_key()
    if not loaded_private_key:
        private_key_password = getpass.getpass('')
        loaded_private_key

    decrypted_text = loaded_private_key.decrypt(
        bytes.fromhex(encrypted_text.decode()),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return decrypted_text.decode()

def encrypt_password():
    ''' encrypt text from stdin using a password '''

    text = readStdIn()
    key = read_key_pass()
    cipher_suite = Fernet(key)
    encrypted_text = cipher_suite.encrypt(text.encode())

    return encrypted_text.decode()

def decrypt_password():
    ''' decrypts encrypted text from stdin using a password '''

    try:
        encrypted_text = readStdIn().encode()
        key = read_key_pass()
        cipher_suite = Fernet(key)
        plaintext = cipher_suite.decrypt(encrypted_text)

        return plaintext.decode()
    except (InvalidToken, InvalidKey, InvalidSignature):
        sys.exit("wrong password")

def encrypt():
    ''' starts encryption using a public key or password '''

    if args.identity:
        encrypted_text = encrypt_public_key()
    else:
        encrypted_text = encrypt_password()

    print(encrypted_text)

def decrypt():
    ''' starts decryption using a private key or password '''

    if args.identity:
        decrypted_text = decrypt_private_key()
    else:
        decrypted_text = decrypt_password()
    print(decrypted_text)

def usage():
    sys.exit('usage: secured [-h] [-e] [-d] [-i IDENTITY]')

def readStdIn():
    ''' reads text to encrypt / decrypt from stdin or prompts for user input '''

    if sys.stdin.isatty():
        return getpass.getpass('enter to encrypt:\n')
    return sys.stdin.read()

init()
